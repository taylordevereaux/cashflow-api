// <auto-generated />
using System;
using CashFlow.Api.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CashFlow.Api.Migrations
{
    [DbContext(typeof(CashFlowDbContext))]
    partial class CashFlowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CashFlow.Api.Repository.Models.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AccountTypeId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(20, 6)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(GetDate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("StartingAmount")
                        .HasColumnType("decimal(20, 6)");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Account","CashFlow");
                });

            modelBuilder.Entity("CashFlow.Api.Repository.Models.AccountType", b =>
                {
                    b.Property<Guid>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AccountTypeConstant")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(GetDate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("AccountTypeId");

                    b.HasIndex("AccountTypeConstant")
                        .IsUnique();

                    b.ToTable("AccountType","Lookup");

                    b.HasData(
                        new
                        {
                            AccountTypeId = new Guid("b86863a3-db66-46e7-87af-bf2a49d66ff9"),
                            AccountTypeConstant = "CREDIT",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Credit"
                        },
                        new
                        {
                            AccountTypeId = new Guid("2920127b-999c-455e-8536-e65ceab8552c"),
                            AccountTypeConstant = "CHEQUING",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chequing"
                        },
                        new
                        {
                            AccountTypeId = new Guid("c83c4b41-21d2-461a-a85f-f930f65ba561"),
                            AccountTypeConstant = "SAVINGS",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Savings"
                        });
                });

            modelBuilder.Entity("CashFlow.Api.Repository.Models.RecurringTransaction", b =>
                {
                    b.Property<Guid>("RecurringTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AccountId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(20, 6)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(GetDate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<Guid?>("ScheduleId");

                    b.Property<Guid>("TransactionTypeId");

                    b.HasKey("RecurringTransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ScheduleId")
                        .IsUnique()
                        .HasFilter("[ScheduleId] IS NOT NULL");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("RecurringTransaction","CashFlow");
                });

            modelBuilder.Entity("CashFlow.Api.Repository.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CashFlow.Api.Repository.Models.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(GetDate())");

                    b.Property<int?>("DayOfMonth");

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ordinal")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<int>("RecurrenceAmount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("RecurrenceType")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedule","CashFlow");
                });

            modelBuilder.Entity("CashFlow.Api.Repository.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AccountId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(20, 6)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(GetDate())");

                    b.Property<Guid>("TransactionTypeId");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transaction","CashFlow");
                });

            modelBuilder.Entity("CashFlow.Api.Repository.Models.TransactionType", b =>
                {
                    b.Property<Guid>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(GetDate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("TransactionTypeConstant")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TransactionTypeId");

                    b.HasIndex("TransactionTypeConstant")
                        .IsUnique();

                    b.ToTable("TransactionType","Lookup");

                    b.HasData(
                        new
                        {
                            TransactionTypeId = new Guid("b47deace-4c2e-4f43-9125-8f78409ed8c2"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Income",
                            TransactionTypeConstant = "INCOME"
                        },
                        new
                        {
                            TransactionTypeId = new Guid("12a56df0-d4de-4462-885e-bcce46dda838"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Expense",
                            TransactionTypeConstant = "EXPENSE"
                        });
                });

            modelBuilder.Entity("CashFlow.Api.Repository.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CashFlow.Api.Repository.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CashFlow.Api.Repository.Models.Account", b =>
                {
                    b.HasOne("CashFlow.Api.Repository.Models.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId");
                });

            modelBuilder.Entity("CashFlow.Api.Repository.Models.RecurringTransaction", b =>
                {
                    b.HasOne("CashFlow.Api.Repository.Models.Account", "Account")
                        .WithMany("RecurringTransactions")
                        .HasForeignKey("AccountId");

                    b.HasOne("CashFlow.Api.Repository.Models.Schedule", "Schedule")
                        .WithOne("RecurringTransaction")
                        .HasForeignKey("CashFlow.Api.Repository.Models.RecurringTransaction", "ScheduleId");

                    b.HasOne("CashFlow.Api.Repository.Models.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CashFlow.Api.Repository.Models.Transaction", b =>
                {
                    b.HasOne("CashFlow.Api.Repository.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId");

                    b.HasOne("CashFlow.Api.Repository.Models.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CashFlow.Api.Repository.Models.UserRole", b =>
                {
                    b.HasOne("CashFlow.Api.Repository.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CashFlow.Api.Repository.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CashFlow.Api.Repository.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CashFlow.Api.Repository.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CashFlow.Api.Repository.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CashFlow.Api.Repository.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
